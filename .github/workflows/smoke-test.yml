---
name: Docker Smoke Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  smoke-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Configure environment
        run: |
          ./scripts/generate_env.sh
          cat .env | sed /^#/d >> $GITHUB_ENV

          ./scripts/install-loki-driver.sh

      - name: Start services
        run: |
          docker compose -f docker-compose.yml -f overlays/docker-compose.traefik-dashboard.yml -f overlays/docker-compose.monitoring.yml up -d

      - name: Wait for services with health checks to pass
        run: |
          docker compose ps
          timeout 60 bash -c '
            SERVICES=$(docker compose -f docker-compose.yml -f overlays/docker-compose.traefik-dashboard.yml -f overlays/docker-compose.monitoring.yml config | python3 -c "import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin)))" | jq -r '\''.services | to_entries[] | select(.value.healthcheck) | .key'\'')
            echo "Services with health checks: $SERVICES"
            echo "Waiting for services with health checks to be healthy..."
            while true; do
              all_healthy=true
              for service in $SERVICES; do
                name=$(docker compose ps --format "table {{.Name}}\t{{.Service}}" | awk -v s="$service" '\''$2 == s {print $1}'\'')
                if [ -z "$name" ]; then
                  echo "Service $service not running, skipping..."
                  continue
                fi
                echo -n "Checking $name..."
                status=$(docker inspect "$name" --format "{{.State.Health.Status}}")
                if [ "$status" = "healthy" ]; then
                  echo "Checking $name..."
                else
                  all_healthy=false
                  break
                fi
              done
              if $all_healthy; then
                echo "All services with health checks are healthy."
                break
              fi
              sleep 5
            done
          '
      - name: Wait for application to be ready
        run: |
          timeout 2m bash -c 'until curl --silent --fail --location https://dhis2-127-0-0-1.nip.io/dhis-web-login/; do sleep 5; done'

      - name: Verify process isn't running as root
        run: |
          USER=$(docker compose exec -T app whoami)
          echo "Container user: $USER"
          [ "$USER" != "root" ]

      - name: Verify process is running as PID 1
        run: |
          DHIS2_PID=$(docker compose exec -T app pgrep java | head -n 1)
          echo "DHIS2 process PID: $DHIS2_PID"
          [ "$DHIS2_PID" = "1" ]

      - name: Debug on failure
        if: failure()
        run: |
          echo "=== Container Status ==="
          docker compose ps -a
          echo "=== App Logs (last 50 lines) ==="
          docker compose logs app --tail=50
          echo "=== Database Logs (last 20 lines) ==="
          docker compose logs database --tail=20
