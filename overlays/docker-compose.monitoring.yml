x-loki-logging: &loki-logging
  driver: loki
  options:
    # We're using the special DNS name host.docker.internal which resolves to the internal IP address used by the host, as the Loki Docker Driver is running on the host network and we need to send logs to it from the service containers
    loki-url: "http://host.docker.internal:3100/loki/api/v1/push"

x-healthcheck-options: &healthcheck-options
  interval: 10s
  timeout: 3s
  retries: 3
  start_period: 30s

services:
  app:
    environment:
      MONITORING_API_ENABLED: on
      MONITORING_JVM_ENABLED: on
      MONITORING_DBPOOL_ENABLED: on
      MONITORING_HIBERNATE_ENABLED: on
      MONITORING_UPTIME_ENABLED: on
      MONITORING_CPU_ENABLED: on
    logging: *loki-logging

  create-monitoring-user:
    image: alpine:3.22
    depends_on:
      app:
        condition: service_healthy
    volumes:
      - ./scripts/create-monitoring-user.sh:/create-monitoring-user.sh:ro
    entrypoint: ["/bin/sh", "/create-monitoring-user.sh"]
    environment:
      # This must match the name of the Docker Compose service running the DHIS2 app and the port it is listening on
      DHIS2_HOSTNAME: ${DHIS2_HOSTNAME:-http://app:8080}
      DHIS2_ADMIN_USERNAME: ${DHIS2_ADMIN_USERNAME}
      DHIS2_ADMIN_PASSWORD: ${DHIS2_ADMIN_PASSWORD}
      DHIS2_MONITOR_USERNAME: ${DHIS2_MONITOR_USERNAME}
      DHIS2_MONITOR_PASSWORD: ${DHIS2_MONITOR_PASSWORD}
    logging: *loki-logging

  database:
    logging: *loki-logging

  traefik:
    logging: *loki-logging

  # This is needed to avoid permission issues with the loki container when running as non-root user
  loki-init:
    image: busybox:1.37.0
    user: root
    volumes:
      - loki:/loki
    command: ["sh", "-c", "mkdir -p /loki/chunks /loki/rules /loki/wal /loki/boltdb-shipper-compactor && chown -R nobody:nobody /loki"]

  loki:
    image: grafana/loki:${LOKI_VERSION:-2.9.0}
    restart: unless-stopped
    user: nobody:nobody
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    volumes:
      - loki:/loki
    # Port is exposed as the Loki Docker Driver is running on the host network and we need to send logs to it from the service containers
    ports:
      - "3100:3100"
    environment:
      LOKI_RETENTION_PERIOD: ${LOKI_RETENTION_PERIOD:-744h}
    depends_on:
      loki-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://host.docker.internal:3100/ready"]
      <<: *healthcheck-options

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.45.0}
    restart: unless-stopped
    user: nobody:nobody
    # TODO: If we want read only we can't read the DHIS2_MONITOR_PASSWORD from the host environment. We would need to write it to a file and reference the file in our secrets configration by the end of this file
    #read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    volumes:
      - prometheus:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    environment:
      PROMETHEUS_RETENTION_TIME: ${PROMETHEUS_RETENTION_TIME:-15d}
    secrets:
      - dhis2_monitor_password
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      <<: *healthcheck-options

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-10.0.0}
    restart: unless-stopped
    user: 472:472
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    volumes:
      - grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_ADMIN_USER: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_LOG_LEVEL: warn
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_SERVER_ROOT_URL: https://grafana.${HOSTNAME}
      GF_SERVER_SERVE_FROM_SUB_PATH: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      <<: *healthcheck-options

volumes:
  loki: { }
  prometheus: { }
  grafana: { }

secrets:
  dhis2_monitor_password:
    environment: DHIS2_MONITOR_PASSWORD
