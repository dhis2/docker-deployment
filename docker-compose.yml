x-database-image: &database-image
  image: postgis/postgis:${POSTGRES_VERSION:-17-3.4}

services:
  app:
    image: dhis2/core:${DHIS2_VERSION:-42}
    restart: unless-stopped
    user: 65534:65534
    read_only: true
    tmpfs:
      - /tmp
      - /usr/local/tomcat/temp
      - /usr/local/tomcat/logs
      - /usr/local/tomcat/work/Catalina/localhost/ROOT
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    volumes:
      - dhis2:/opt/dhis2/
      #- ./config/dhis2/log4j2.xml:/opt/dhis2/log4j2.xml:ro
      - ./config/dhis2/dhis.conf:/opt/dhis2/dhis.conf:ro
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:8080/dhis-web-login/" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 120s
    depends_on:
      database:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dhis}
      POSTGRES_DB_USERNAME: ${POSTGRES_DB_USERNAME}
      POSTGRES_DB_PASSWORD: ${POSTGRES_DB_PASSWORD}

  database:
    <<: *database-image
    restart: unless-stopped
    user: postgres
    security_opt:
      - no-new-privileges:true
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-dhis}
      POSTGRES_DB_USERNAME: ${POSTGRES_DB_USERNAME}
      POSTGRES_DB_PASSWORD: ${POSTGRES_DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    healthcheck:
      test: [ "CMD-SHELL","pg_isready -U postgres -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 3

  traefik:
    image: traefik:v3.5
    restart: unless-stopped
    user: nobody:nobody
    read_only: true
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./traefik/acme.json:/cert/acme.json:rw
    environment:
      TRAEFIK_LOG_LEVEL: ${LOG_LEVEL:-INFO}
      TRAEFIK_ACCESSLOG: ${LOG_ACCESS:-true}
      TRAEFIK_ACCESSLOG_FORMAT: ${LOG_FORMAT:-json}
      TRAEFIK_PING: true
      TRAEFIK_ENTRYPOINTS_WEB_ADDRESS: :80
      TRAEFIK_ENTRYPOINTS_WEB_HTTP_REDIRECTIONS_ENTRYPOINT_TO: websecure
      TRAEFIK_ENTRYPOINTS_WEB_HTTP_REDIRECTIONS_ENTRYPOINT_SCHEME: https
      TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS: :443
      TRAEFIK_PROVIDERS_FILE_FILENAME: /etc/traefik/dynamic.yml
      TRAEFIK_PROVIDERS_FILE_WATCH: true
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL: ${LETSENCRYPT_ACME_EMAIL}
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE: /cert/acme.json
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_TLSCHALLENGE: true
      HOSTNAME: ${HOSTNAME}
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  backup-database:
    profiles:
      - backup
    <<: *database-image
    volumes:
      - ./backups:/backups
    environment:
      POSTGRES_HOST: database
      POSTGRES_USER: ${POSTGRES_DB_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-dhis}
      POSTGRES_BACKUP_FORMAT: ${POSTGRES_BACKUP_FORMAT:-custom}
      PGPASSWORD: ${POSTGRES_DB_PASSWORD}
    command: >
      /bin/sh -c "
        EXT=''
        case \"$$POSTGRES_BACKUP_FORMAT\" in
          plain) EXT=sql;;
          custom) EXT=pgc;;
        esac
        pg_dump --host $$POSTGRES_HOST --username $$POSTGRES_USER --format $$POSTGRES_BACKUP_FORMAT --file /backups/$$BACKUP_TIMESTAMP.$$EXT $$POSTGRES_DB --verbose
        if [ \"$$POSTGRES_BACKUP_FORMAT\" = \"plain\" ]; then
          tar --create --gzip --file /backups/$$BACKUP_TIMESTAMP.$$EXT.tar.gz --directory /backups $$BACKUP_TIMESTAMP.$$EXT
          rm /backups/$$BACKUP_TIMESTAMP.$$EXT
        fi
      "
    depends_on:
      database:
        condition: service_healthy

  backup-filestorage:
    profiles:
      - backup
    image: busybox:1.37.0
    volumes:
      - dhis2:/opt/dhis2/
      - ./backups:/backups
    entrypoint: /bin/sh -c "tar --create --verbose --gzip --file /backups/$$BACKUP_TIMESTAMP.tar.gz --directory /opt/dhis2/files ."

volumes:
  dhis2: { }
  postgres: { }
